version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    command: /start
    volumes:
      - .:/app  # Mount the project directory into the container
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    # ports:
    #   - "8000:8000"  # Publish port 8000 on the container to port 3000 on the host
    env_file:
      - .env
    depends_on:
      - postgres-db
      - redis
    networks:
      - aures-estate

  postgres-db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - aures-estate
    ports:
      - "5432:5432"

  redis:
    image: redis:5-alpine
    networks:
      - aures-estate
    ports:
      - "6379:6379"

  celery_worker:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    command: /start-celeryworker
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres-db
    networks:
      - aures-estate

  flower:
      build:
          context: .
          dockerfile: ./docker/local/django/Dockerfile
      command: celery flower
      volumes:
          - .:/app
      env_file:
          - .env
      ports:
          - "5557:5555"
      depends_on:
          - redis
          - postgres-db
      networks:
          - aures-estate

  nginx:
    restart: always
    depends_on:
      - api
    volumes:
      - .:/app  # Mount the project directory into the container
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    networks:
      - aures-estate


networks:
  aures-estate:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
